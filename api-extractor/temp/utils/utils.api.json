{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.25.0",
    "schemaVersion": 1006,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@copyright",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@file",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@author",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@license",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@category",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@module",
          "syntaxKind": "block",
          "allowMultiple": true
        }
      ],
      "supportForTags": {
        "@category": true,
        "@module": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@keywork/utils!",
  "docComment": "",
  "name": "@keywork/utils",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@keywork/utils!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!arrayBufferToBase64:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayBufferToBase64(arrayBuffer: "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arrayBuffer",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "arrayBufferToBase64"
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!arrayBufferToString:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayBufferToString(buf: "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "buf",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "arrayBufferToString"
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!CachableResponse:class",
          "docComment": "/**\n * A client-side cachable response.\n *\n * @remarks\n *\n * Etag caching is supported when `CachableResponse` is constructed with the needed parameters. You may want to disable caching in your browser development tools to avoid this behavior while debugging.\n *\n * @category\n *\n * HTTP Responses\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CachableResponse extends "
            },
            {
              "kind": "Reference",
              "text": "Response",
              "canonicalReference": "!Response:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CachableResponse",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!CachableResponse:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CachableResponse` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    body: "
                },
                {
                  "kind": "Reference",
                  "text": "BodyInit",
                  "canonicalReference": "!BodyInit:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", \n    request?: "
                },
                {
                  "kind": "Reference",
                  "text": "Request",
                  "canonicalReference": "!Request:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \n    etag?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ", \n    cacheControlOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CacheControlDirectives",
                  "canonicalReference": "@keywork/utils!CacheControlDirectives:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", \n    headersInit?: "
                },
                {
                  "kind": "Reference",
                  "text": "HeadersInit",
                  "canonicalReference": "!HeadersInit:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "body",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "request",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "etag",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "cacheControlOptions",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 12
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "headersInit",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@keywork/utils!CacheControlDirectives:interface",
          "docComment": "/**\n * Directives for the Cache-Control header.\n *\n * @category\n *\n * HTTP Responses\n *\n * @see\n *\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control MDN}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CacheControlDirectives "
            }
          ],
          "releaseTag": "Public",
          "name": "CacheControlDirectives",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!CacheControlDirectives#\"max-age\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'max-age': "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"max-age\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!CacheControlDirectives#\"must-revalidate\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'must-revalidate': "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"must-revalidate\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "IndexSignature",
              "canonicalReference": "@keywork/utils!CacheControlDirectives:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[cacheControlKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "number | boolean | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "cacheControlKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!CacheControlDirectives#immutable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "immutable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "immutable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!CacheControlHeader:type",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CacheControlHeader = "
            },
            {
              "kind": "Reference",
              "text": "HeadersInit",
              "canonicalReference": "!HeadersInit:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    'Cache-Control': string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CacheControlHeader",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!ContentTypeHeader:type",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ContentTypeHeader = "
            },
            {
              "kind": "Reference",
              "text": "HeadersInit",
              "canonicalReference": "!HeadersInit:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    'Content-Type': string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ContentTypeHeader",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@keywork/utils!convertJSONToETaggableString:var",
          "docComment": "/**\n * Wraps `JSON.stringify` to ensure that JSON pretty printing doesn't influence ETag generation.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "convertJSONToETaggableString: "
            },
            {
              "kind": "Content",
              "text": "(value: {}) => string"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "convertJSONToETaggableString",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!createCacheControlHeader:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createCacheControlHeader(options: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CacheControlDirectives",
              "canonicalReference": "@keywork/utils!CacheControlDirectives:interface"
            },
            {
              "kind": "Content",
              "text": "> | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CacheControlHeader",
              "canonicalReference": "@keywork/utils!CacheControlHeader:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "createCacheControlHeader"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@keywork/utils!DURATION_FIVE_MINUTES:var",
          "docComment": "/**\n * 5 minutes in milliseconds.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DURATION_FIVE_MINUTES: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DURATION_FIVE_MINUTES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@keywork/utils!DURATION_ONE_DAY:var",
          "docComment": "/**\n * 1 day in milliseconds.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DURATION_ONE_DAY: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DURATION_ONE_DAY",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@keywork/utils!DURATION_ONE_HOUR:var",
          "docComment": "/**\n * 1 hour in milliseconds.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DURATION_ONE_HOUR: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DURATION_ONE_HOUR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@keywork/utils!DURATION_ONE_WEEK:var",
          "docComment": "/**\n * 1 week in milliseconds.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DURATION_ONE_WEEK: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DURATION_ONE_WEEK",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@keywork/utils!EntityToETagOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EntityToETagOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "EntityToETagOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!EntityToETagOptions#weak:member",
              "docComment": "/**\n * Indicates that a weak validator is used. Weak etags are easy to generate, but are far less useful for comparisons. Strong validators are ideal for comparisons but can be very difficult to generate efficiently. Weak ETag values of two representations of the same resources might be semantically equivalent, but not byte-for-byte identical. This means weak etags prevent caching when byte range requests are used, but strong etags mean range requests can still be cached.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "weak?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "weak",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@keywork/utils!ErrorJSONBody:interface",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ErrorJSONBody "
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorJSONBody",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!ErrorJSONBody#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!ErrorJSONBody#statusCode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statusCode: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "statusCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!ErrorResponse:class",
          "docComment": "/**\n * An error response sent to a client when a request is invalid in some way.\n *\n * @remarks\n *\n * If an error object is available and publically visible, consider {@link ErrorResponse.fromUnknownError}\n *\n * @category\n *\n * HTTP Responses\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ErrorResponse extends "
            },
            {
              "kind": "Reference",
              "text": "Response",
              "canonicalReference": "!Response:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorResponse",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!ErrorResponse:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ErrorResponse` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    status?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    statusText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", \n    body?: "
                },
                {
                  "kind": "Reference",
                  "text": "BodyInit",
                  "canonicalReference": "!BodyInit:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", \n    headersInit?: "
                },
                {
                  "kind": "Reference",
                  "text": "HeadersInit",
                  "canonicalReference": "!HeadersInit:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "status",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "statusText",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "body",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "headersInit",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ErrorResponse.fromUnknownError:member(1)",
              "docComment": "/**\n * Given an error-like object, attempt respond with a `KeyworkResourceError`.\n *\n * @example\n *\n * Handling a error from an incoming request.\n * ```ts\n * try {\n *   result = await fetchFoobarResource()\n * } catch (error) {\n *   // Log the error internally...\n *   console.error(error)\n *\n *   // Respond with a public reason...\n *   return ErrorResponse.fromUnknownError(error, 'An error occured while fetching foobar.')\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromUnknownError(\n    _error: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", \n    publicReason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorResponse",
                  "canonicalReference": "@keywork/utils!ErrorResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "publicReason",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "fromUnknownError"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!ETaggable:type",
          "docComment": "/**\n * Types that can be converted into ETags.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ETaggable = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ETaggable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!fileExtensionToContentTypeHeader:function(1)",
          "docComment": "/**\n * Transforms a given file extension into a `ContentTypeHeader`\n *\n * @param extension - File extension, preferrably without the leading dot. e.g. `\"txt\"`, `\"html\"`\n *\n * @param mimeTypeFallback - An optional fallback if the mimeType is not known. Defaults to `\"text/plain\"`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fileExtensionToContentTypeHeader(extension: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", mimeTypeFallback?: "
            },
            {
              "kind": "Content",
              "text": "\"txt\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ContentTypeHeader",
              "canonicalReference": "@keywork/utils!ContentTypeHeader:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "extension",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "mimeTypeFallback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "fileExtensionToContentTypeHeader"
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!generateETag:function(1)",
          "docComment": "/**\n * Create a simple ETag.\n *\n * @param entity - Either a `string`, `ArrayBuffer`. If working with JSON, run the value through `JSON.stringify` first.\n *\n * @param options - See `EntityToETagOptions`\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateETag(entity: "
            },
            {
              "kind": "Reference",
              "text": "ETaggable",
              "canonicalReference": "@keywork/utils!ETaggable:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "EntityToETagOptions",
              "canonicalReference": "@keywork/utils!EntityToETagOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "generateETag"
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!getBrowserIdentifier:function(1)",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBrowserIdentifier(request: "
            },
            {
              "kind": "Reference",
              "text": "Request",
              "canonicalReference": "!Request:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "request",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getBrowserIdentifier"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@keywork/utils!GlobalConsoleLike:interface",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GlobalConsoleLike "
            }
          ],
          "releaseTag": "Public",
          "name": "GlobalConsoleLike",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@keywork/utils!GlobalConsoleLike#debug:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug(message?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", ...optionalParams: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "optionalParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "debug"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@keywork/utils!GlobalConsoleLike#error:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error(message?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", ...optionalParams: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "optionalParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "error"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@keywork/utils!GlobalConsoleLike#info:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info(message?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", ...optionalParams: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "optionalParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "info"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@keywork/utils!GlobalConsoleLike#log:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log(message?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", ...optionalParams: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "optionalParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "log"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@keywork/utils!GlobalConsoleLike#warn:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn(message?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", ...optionalParams: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "optionalParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "warn"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!hexToDec:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hexToDec(hexStr: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hexStr",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hexToDec"
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!HTMLResponse:class",
          "docComment": "/**\n * A cachable request containing HTML content.\n *\n * @category\n *\n * HTTP Responses\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HTMLResponse extends "
            },
            {
              "kind": "Reference",
              "text": "CachableResponse",
              "canonicalReference": "@keywork/utils!CachableResponse:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HTMLResponse",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!HTMLResponse:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `HTMLResponse` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    htmlContent: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \n    request?: "
                },
                {
                  "kind": "Reference",
                  "text": "Request",
                  "canonicalReference": "!Request:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \n    etag?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", \n    cacheControlOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "CacheControlDirectives",
                  "canonicalReference": "@keywork/utils!CacheControlDirectives:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \n    headersInit?: "
                },
                {
                  "kind": "Reference",
                  "text": "HeadersInit",
                  "canonicalReference": "!HeadersInit:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "htmlContent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "request",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "etag",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "cacheControlOptions",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "headersInit",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!isETagMatch:function(1)",
          "docComment": "/**\n * Utility function to check if a given request's headers match an etag. If the etag matches, the client may use the locally cache resource.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isETagMatch(request: "
            },
            {
              "kind": "Reference",
              "text": "Request",
              "canonicalReference": "!Request:interface"
            },
            {
              "kind": "Content",
              "text": ", etag: "
            },
            {
              "kind": "Content",
              "text": "string | null | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "etag",
              "canonicalReference": "@keywork/utils!~etag"
            },
            {
              "kind": "Content",
              "text": " is string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "request",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "etag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isETagMatch"
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!isRequestLike:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRequestLike(requestish: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "requestish",
              "canonicalReference": "@keywork/utils!~requestish"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "RequestLike",
              "canonicalReference": "@keywork/utils!RequestLike:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "requestish",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRequestLike"
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!isURLLike:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isURLLike(urlish: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "urlish",
              "canonicalReference": "@keywork/utils!~urlish"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "URLLike",
              "canonicalReference": "@keywork/utils!URLLike:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "urlish",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isURLLike"
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!JSONResponse:class",
          "docComment": "/**\n * A response sent to the client containing a JSON object.\n *\n * @remarks\n *\n * Etag caching is supported when `JSONResponse` is constructed with the needed parameters. You may want to disable caching in your browser development tools to avoid this behavior while debugging.\n *\n * @category\n *\n * HTTP Responses\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class JSONResponse extends "
            },
            {
              "kind": "Reference",
              "text": "CachableResponse",
              "canonicalReference": "@keywork/utils!CachableResponse:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONResponse",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!JSONResponse:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `JSONResponse` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    json: "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": ", \n    request?: "
                },
                {
                  "kind": "Reference",
                  "text": "Request",
                  "canonicalReference": "!Request:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \n    etag?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", \n    cacheControlOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "CacheControlDirectives",
                  "canonicalReference": "@keywork/utils!CacheControlDirectives:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \n    headersInit?: "
                },
                {
                  "kind": "Reference",
                  "text": "HeadersInit",
                  "canonicalReference": "!HeadersInit:type"
                },
                {
                  "kind": "Content",
                  "text": ", \n    pretty?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "request",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "etag",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "cacheControlOptions",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "headersInit",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "pretty",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@keywork/utils!KeyworkQueryParamKeys:enum",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum KeyworkQueryParamKeys "
            }
          ],
          "releaseTag": "Public",
          "name": "KeyworkQueryParamKeys",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@keywork/utils!KeyworkQueryParamKeys.BuildID:member",
              "docComment": "/**\n * The current build ID. Used to bust caches on static assets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BuildID = "
                },
                {
                  "kind": "Content",
                  "text": "\"build-id\""
                }
              ],
              "releaseTag": "Public",
              "name": "BuildID",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@keywork/utils!KeyworkQueryParamKeys.StaticProps:member",
              "docComment": "/**\n * A boolean-like query param that hints to the worker that client-side React only needs the static props for an upcoming page transition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StaticProps = "
                },
                {
                  "kind": "Content",
                  "text": "\"static-props\""
                }
              ],
              "releaseTag": "Public",
              "name": "StaticProps",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!KeyworkResourceError:class",
          "docComment": "/**\n * An error class that feels fits nicely into an incoming HTTP request handler. This pairs well with the `http-status-codes` NPM package.\n *\n * @example\n *\n * Check if a user has permission to do some action.\n * ```typescript\n * if (isLoggedIn(someUser))\n *   throw new KeyworkResourceError(\"You must be logged in to do that\", StatusCodes.UNAUTHORIZED)\n * }\n * if (someUser.role !== 'admin')\n *   throw new KeyworkResourceError(\"Only an admin can access that\", StatusCodes.FORBIDDEN)\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class KeyworkResourceError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "KeyworkResourceError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!KeyworkResourceError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `KeyworkResourceError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(statusText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", status?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "statusText",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "status",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!KeyworkResourceError.fromUnknownError:member(1)",
              "docComment": "/**\n * Attempts to convert an unknown error object into a well-formed `KeyworkResourceError`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromUnknownError(\n    _error: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "KeyworkResourceError",
                  "canonicalReference": "@keywork/utils!KeyworkResourceError:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "fromUnknownError"
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!KeyworkResourceError#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get message(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!KeyworkResourceError#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!KeyworkResourceError#statusText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statusText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "statusText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!KeyworkResourceError#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorJSONBody",
                  "canonicalReference": "@keywork/utils!ErrorJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!matchPath:function(1)",
          "docComment": "/**\n * Performs pattern matching on a URL pathname and returns information about the match.\n *\n * @see\n *\n * https://reactrouter.com/docs/en/v6/api#matchpath\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function matchPath<ExpectedParams extends "
            },
            {
              "kind": "Content",
              "text": "{} | null"
            },
            {
              "kind": "Content",
              "text": ", Path extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(pattern: "
            },
            {
              "kind": "Reference",
              "text": "PathPattern",
              "canonicalReference": "@keywork/utils!PathPattern:interface"
            },
            {
              "kind": "Content",
              "text": "<Path> | Path"
            },
            {
              "kind": "Content",
              "text": ", pathname: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PathMatch",
              "canonicalReference": "@keywork/utils!PathMatch:interface"
            },
            {
              "kind": "Content",
              "text": "<ExpectedParams> | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pattern",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "pathname",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ExpectedParams",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Path",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "matchPath"
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!NotModifiedResponse:class",
          "docComment": "/**\n * Given that a request's etag header matches an server entity or resource, a `NotModifiedResponse` should be sent to the requestor as an indication that the client's cache is still applicable.\n *\n * @category\n *\n * HTTP Responses\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NotModifiedResponse extends "
            },
            {
              "kind": "Reference",
              "text": "Response",
              "canonicalReference": "!Response:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NotModifiedResponse",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!NotModifiedResponse:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `NotModifiedResponse` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(etag: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "etag",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!numberInRange:function(1)",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function numberInRange(given: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", minimum?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", maximum?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "given",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "minimum",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "maximum",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "numberInRange"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!ParsedPathParams:type",
          "docComment": "/**\n * The parameters that were parsed from the URL path.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParsedPathParams<Key extends "
            },
            {
              "kind": "Content",
              "text": "string "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly [key in Key]: string | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParsedPathParams",
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!parsePathname:function(1)",
          "docComment": "/**\n * Performs pattern matching on a URL pathname and returns information about the match.\n *\n * @throws\n *\n * {@link @keywork/utils/KeyworkResourceError}\n *\n * @see\n *\n * {@link https://reactrouter.com/docs/en/v6/api#matchpath}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parsePathname<ExpectedParams extends "
            },
            {
              "kind": "Content",
              "text": "{} | null"
            },
            {
              "kind": "Content",
              "text": ">(pattern: "
            },
            {
              "kind": "Reference",
              "text": "PathPattern",
              "canonicalReference": "@keywork/utils!PathPattern:interface"
            },
            {
              "kind": "Content",
              "text": "<string> | string"
            },
            {
              "kind": "Content",
              "text": ", urlOrRequest: "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Request",
              "canonicalReference": "!Request:interface"
            },
            {
              "kind": "Content",
              "text": ", 'url'> | string | "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!URL:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PathMatch",
              "canonicalReference": "@keywork/utils!PathMatch:interface"
            },
            {
              "kind": "Content",
              "text": "<ExpectedParams>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pattern",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "urlOrRequest",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ExpectedParams",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "parsePathname"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!PathBuilder:type",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PathBuilder = "
            },
            {
              "kind": "Content",
              "text": "(...collectionPath: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<string | undefined>) => string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PathBuilder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@keywork/utils!PathMatch:interface",
          "docComment": "/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PathMatch<ExpectedParams extends "
            },
            {
              "kind": "Content",
              "text": "{} | null "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Content",
              "text": "null"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ExpectedParams",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "PathMatch",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!PathMatch#params:member",
              "docComment": "/**\n * The names and values of dynamic parameters in the URL.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "params: "
                },
                {
                  "kind": "Content",
                  "text": "ExpectedParams"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!PathMatch#pathname:member",
              "docComment": "/**\n * The portion of the URL pathname that was matched.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pathname: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pathname",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!PathMatch#pathnameBase:member",
              "docComment": "/**\n * The portion of the URL pathname that was matched before child routes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pathnameBase: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pathnameBase",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!PathMatch#pattern:member",
              "docComment": "/**\n * The pattern that was used to match.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pattern: "
                },
                {
                  "kind": "Reference",
                  "text": "PathPattern",
                  "canonicalReference": "@keywork/utils!PathPattern:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@keywork/utils!PathPattern:interface",
          "docComment": "/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PathPattern<Path extends "
            },
            {
              "kind": "Content",
              "text": "string "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Path",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "PathPattern",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!PathPattern#caseSensitive:member",
              "docComment": "/**\n * Should be `true` if the static portions of the `path` should be matched in the same case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "caseSensitive?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "caseSensitive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!PathPattern#end:member",
              "docComment": "/**\n * Should be `true` if this pattern should match the entire URL pathname.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "end?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@keywork/utils!PathPattern#path:member",
              "docComment": "/**\n * A string to match against a URL pathname. May contain `:id`-style segments to indicate placeholders for dynamic parameters. May also end with `/*` to indicate matching the rest of the URL pathname.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Content",
                  "text": "Path"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!PrefixedLogger:class",
          "docComment": "/**\n * A isomorphic logger available in the browser and worker environment.\n *\n * @example\n * ```ts\n * const logger = new PrefixedLogger('Todo API')\n * logger.info('Fetching todo', todoID)\n * logger.error('Unexpected error')\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PrefixedLogger "
            }
          ],
          "releaseTag": "Public",
          "name": "PrefixedLogger",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#_error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _error: "
                },
                {
                  "kind": "Reference",
                  "text": "GlobalConsoleLike",
                  "canonicalReference": "@keywork/utils!GlobalConsoleLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "['error']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#_log:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_log: "
                },
                {
                  "kind": "Reference",
                  "text": "GlobalConsoleLike",
                  "canonicalReference": "@keywork/utils!GlobalConsoleLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "['log']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_log",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!PrefixedLogger:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PrefixedLogger` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(logPrefix: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", color?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "logPrefix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#debug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug: "
                },
                {
                  "kind": "Reference",
                  "text": "GlobalConsoleLike",
                  "canonicalReference": "@keywork/utils!GlobalConsoleLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "['debug']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "(error: unknown) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "GlobalConsoleLike",
                  "canonicalReference": "@keywork/utils!GlobalConsoleLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "['info']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!PrefixedLogger#json:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "json(json: "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "json"
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!PrefixedLogger#jsonEntries:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jsonEntries<T>(label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", json: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ", key: "
                },
                {
                  "kind": "Content",
                  "text": "keyof T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "jsonEntries"
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#log:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log: "
                },
                {
                  "kind": "Reference",
                  "text": "GlobalConsoleLike",
                  "canonicalReference": "@keywork/utils!GlobalConsoleLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "['log']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "log",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#logPrefix:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected logPrefix: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logPrefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!PrefixedLogger#warn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn: "
                },
                {
                  "kind": "Reference",
                  "text": "GlobalConsoleLike",
                  "canonicalReference": "@keywork/utils!GlobalConsoleLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "['warn']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "warn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!PrettyJSON:type",
          "docComment": "/**\n * @remarks\n *\n * Keywork is free software for non-commercial purposes. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving the Keywork software without disclosing the source code of your own applications.\n *\n * @file\n *\n * This file is part of the Keywork project.\n *\n * @copyright\n *\n * Nirrius, LLC. All rights reserved.\n *\n * @author\n *\n * Teffen Ellis, et al.\n *\n * @license\n *\n * AGPL-3.0\n *\n * @see\n *\n * LICENSE.md in the project root for further licensing information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PrettyJSON = "
            },
            {
              "kind": "Content",
              "text": "(...args: "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "JSON.stringify",
              "canonicalReference": "!JSON#stringify:member"
            },
            {
              "kind": "Content",
              "text": ">) => string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PrettyJSON",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@keywork/utils!prettyJSON:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "prettyJSON: "
            },
            {
              "kind": "Reference",
              "text": "PrettyJSON",
              "canonicalReference": "@keywork/utils!PrettyJSON:type"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "prettyJSON",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!ReadableStream_2:class",
          "docComment": "/**\n * The `ReadableStream` interface of the [Streams API](https://developer.mozilla.org//en-US/docs/Web/API/Streams_API) represents a readable stream of byte data. The [Fetch API](/en-US/docs/Web/API/Fetch_API) offers a concrete instance of a `ReadableStream` through the [`body`](https://developer.mozilla.org/en-US/docs/Web/API/Response/body) property of a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object.\n *\n * @remarks\n *\n * This class implementation polyfills `ReadableStream` in the Cloudflare Pages environment.\n *\n * @example\n *\n * Usage with ESBuild\n * ```js\n * import esbuild from 'esbuild'\n * import { createRequire } from 'module'\n * const require = createRequire(import.meta.url)\n *\n * esbuild.build({\n *   format: 'esm',\n *   entryPoints: ['...'],\n *   inject: [ require.resolve('@keywork/utils/polyfills/ReadableStream.js') ]\n * })\n * ```\n *\n * @category\n *\n * Worker Polyfills\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ReadableStream implements "
            },
            {
              "kind": "Reference",
              "text": "globalThis.ReadableStream",
              "canonicalReference": "!ReadableStream:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ReadableStream_2",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#[Symbol.asyncIterator]:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Symbol.asyncIterator",
                  "canonicalReference": "!SymbolConstructor#asyncIterator"
                },
                {
                  "kind": "Content",
                  "text": "](_options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStreamValuesOptions",
                  "canonicalReference": "!ReadableStreamValuesOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableIterator",
                  "canonicalReference": "!AsyncIterableIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "[Symbol.asyncIterator]"
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!ReadableStream_2:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ReadableStream` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(underlyingSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "UnderlyingSource",
                  "canonicalReference": "!UnderlyingSource:interface"
                },
                {
                  "kind": "Content",
                  "text": ", _queuingStrategy?: "
                },
                {
                  "kind": "Reference",
                  "text": "StreamQueuingStrategy",
                  "canonicalReference": "!StreamQueuingStrategy:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "underlyingSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "_queuingStrategy",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#cancel:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancel(reason?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "cancel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#getReader:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getReader(options: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStreamGetReaderOptions",
                  "canonicalReference": "!ReadableStreamGetReaderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStreamBYOBReader",
                  "canonicalReference": "!ReadableStreamBYOBReader:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getReader"
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#getReader:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getReader(): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStreamDefaultReader",
                  "canonicalReference": "!ReadableStreamDefaultReader:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [],
              "isOptional": false,
              "name": "getReader"
            },
            {
              "kind": "Property",
              "canonicalReference": "@keywork/utils!ReadableStream_2#locked:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get locked(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "locked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#pipeThrough:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pipeThrough(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStreamTransform",
                  "canonicalReference": "!ReadableStreamTransform:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "PipeToOptions",
                  "canonicalReference": "!PipeToOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "globalThis.ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "pipeThrough"
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#pipeTo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pipeTo(destination: "
                },
                {
                  "kind": "Reference",
                  "text": "WritableStream",
                  "canonicalReference": "!WritableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "PipeToOptions",
                  "canonicalReference": "!PipeToOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "destination",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "pipeTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#tee:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tee(): "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "globalThis.ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "globalThis.ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "tee"
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!ReadableStream_2#values:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "values(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStreamValuesOptions",
                  "canonicalReference": "!ReadableStreamValuesOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableIterator",
                  "canonicalReference": "!AsyncIterableIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "values"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!RequestLike:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RequestLike = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Request",
              "canonicalReference": "!Request:interface"
            },
            {
              "kind": "Content",
              "text": ", 'url'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RequestLike",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@keywork/utils!resolveDocPath:var",
          "docComment": "/**\n * Resolves a POSIX-like path into slash delineated segments.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "resolveDocPath: "
            },
            {
              "kind": "Reference",
              "text": "PathBuilder",
              "canonicalReference": "@keywork/utils!PathBuilder:type"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "resolveDocPath",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@keywork/utils!SnowflakeID:class",
          "docComment": "/**\n * A basic implementation of Twitter's original Snowflake ID system.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SnowflakeID "
            }
          ],
          "releaseTag": "Public",
          "name": "SnowflakeID",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@keywork/utils!SnowflakeID:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SnowflakeID` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        mid?: number;\n        offset?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@keywork/utils!SnowflakeID#generate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "generate(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "generate"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@keywork/utils!stringToArrayBuffer:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stringToArrayBuffer(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "stringToArrayBuffer"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@keywork/utils!URLLike:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type URLLike = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!URL:interface"
            },
            {
              "kind": "Content",
              "text": ", 'pathname'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "URLLike",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        }
      ]
    }
  ]
}
